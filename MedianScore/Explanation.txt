Firstly I Initialize List of ints with the input named scores;
var scores = new List<int>() {100, 20, 50, 70, 45};
Then, I Invoke GetMedianScoreList with scores as parameter, which returns my calculated result;
    try
    {
        var result = GetMedianScoreList(scores);
        Console.WriteLine('[' + String.Join(",", result) + ']');
    }
    catch (Exception e)
    {
        Console.WriteLine(e.Message);
    }
The code is in try catch for any errors, after the result is returned, I print it in the Console in [a,b,c,d] format;
The First line of the method always adds the first element to the result, if input is empty it returns 0;

var result = new List<int> {scores.FirstOrDefault(x => true)};

//Then I create a subScore list with the first value of scores, which will be used for the calculations;

var subScores = new List<int> {result.First()};

Then I have for loop which starts from i = 1 and adds next element to subScores and then sorts it;
for (int i = 1; i < scores.Count; i++)
    {
        //Add next element and sort the list
        subScores.Add(scores[i]);
        subScores = subScores.OrderBy(x => x).ToList();
        int median;
        //If count is even, return middle elements summed and divided by 2 rounded to nearest integer
        if (subScores.Count % 2 == 0)
        {
            //Get the middle left and right integer indexes
            var left = (subScores.Count / 2) - 1;
            var right = (subScores.Count / 2);
            //Calculates the median
            median = (int) Math.Round((decimal) (subScores[left] + subScores[right]) / 2);
        }
        //If count is odd get the middle element of the sorted list
        else
        {
            //Gets the middle integer
            var middle = subScores.Count / 2;
            median = subScores[middle];
        }

        //Add the median to the result list
        result.Add(median);
    }

    return result;
And Finally I print my returned result List;
